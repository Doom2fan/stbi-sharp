name: Publish

on:
  push:
    tags:
      - v*

jobs:
  build_native_linux:
    name: Build native on linux
    runs-on: ubuntu-16.04

    steps:
      - uses: actions/checkout@v1
        with:
          submodules: recursive
      - name: Build
        run: |
          mkdir build
          cd build
          cmake ../libstbi
          make install
      - uses: actions/upload-artifact@master
        with:
          name: linux-x64
          path: runtimes/linux-x64

  build_native_macos:
    name: Build native on macOS
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v1
        with:
          submodules: recursive
      - name: Build
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 ../libstbi
          make install
      - uses: actions/upload-artifact@master
        with:
          name: osx-x64
          path: runtimes/osx-x64

  build_native_windows:
    name: Build native on Windows
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v1
        with:
          submodules: recursive

      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1

      - name: Build
        run: |
          mkdir build
          cd build
          cmake ../libstbi
          msbuild /v:m /p:Configuration=Release INSTALL.vcxproj

      - uses: actions/upload-artifact@master
        with:
          name: win-x64
          path: runtimes/win-x64

  build_and_publish_wrapper:
    name: Build and publish C# wrapper
    runs-on: ubuntu-latest
    needs: [build_native_linux, build_native_macos, build_native_windows]

    steps:
      - uses: actions/checkout@v1
      - name: Grab linux binary
        uses: actions/download-artifact@master
        with:
          name: linux-x64
          path: runtimes/linux-x64
      - name: Grab macOS binary
        uses: actions/download-artifact@master
        with:
          name: osx-x64
          path: runtimes/osx-x64
      - name: Grab Windows binary
        uses: actions/download-artifact@master
        with:
          name: win-x64
          path: runtimes/win-x64
      - name: Setup data
        id: datavars
        run: echo "::set-output name=version::$(echo ${{ github.ref }} | cut -d'/' -f3 | tail -c +2)"
      - name: Get version, build, and publish
        run: |
          export GIT_HASH=${{ github.sha }}
          export GIT_BRANCH=${GITHUB_REF#refs/heads/}

          export VERSION=${{ steps.datavars.outputs.version }}
          echo $VERSION $GIT_BRANCH

          sed "s/%COMMIT%/$GIT_HASH/;s/%BRANCH%/$GIT_BRANCH/" < stbi-sharp.csproj > stbi-sharp-build.csproj

          echo Building and packing...
          dotnet pack stbi-sharp-build.csproj -c Release /p:Version=$VERSION

          echo Publishing...
          cd bin/Release
          dotnet nuget push phantombeta.StbiSharp.$VERSION.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json
      - uses: actions/upload-artifact@master
        with:
          name: nuget-package
          path: bin/Release/phantombeta.StbiSharp.${{ steps.datavars.outputs.version }}.nupkg